### Python script to find flags for Linux chmod cmd ###
import angr, claripy, monkeyhex, sys

class hook_getopt(angr.SimProcedure):
    def run(self):
        print('Hooking...')
        return SYMB

def solve():

    global SYMB

    # Set load options and load binary
    loadOpt = {'main_opts':{'arch':'x86'}}
    proj = angr.Project('chmod', load_options = loadOpt, auto_load_libs = False)
    
    '''
    # Set up the hook
    proj.hook_symbol('getopt_long', hook_getopt())
    '''

    # Find execution start point using CFG
    cfg = proj.analyses.CFGFast()
    for addr in list(cfg.kb.functions):
        if cfg.kb.functions[addr].name == 'getopt_long':
            GETOPT_ADDR = addr
            break
    TARGET_ADDR = cfg.get_any_node(GETOPT_ADDR).predecessors[0].addr
    

    # Explore the binary
    argv = ['chmod', claripy.BVS('flags', 8)]
    state = proj.factory.blank_state(args = argv, remove_options =
            {angr.options.LAZY_SOLVES}, addr = TARGET_ADDR)
    state.add_constraints(argv[1] >= ' ')
    state.add_constraints(argv[1] <= '~')
    SYMB = argv[1]
    
    sim = proj.factory.simgr(state)
    print("exploring with cmdline args %s from %s" % (argv[1], sim.active))
    
    while len(sim.active) == 1:
        sim.step()

    print(sim)
    '''
    for step in sim.unconstrained[0].history.descriptions:
        print(step)
    '''

if __name__ == '__main__':
    solve()
