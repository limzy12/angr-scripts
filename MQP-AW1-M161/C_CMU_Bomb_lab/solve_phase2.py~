### Python script to solve Phase 2 of CMU bomb lab ###

## Bomb lab binary available at https://github.com/yyqian/csapp-labs/blob/master/bomblab/bomb.tar

import angr, monkeyhex, logging

 # logging.getLogger('angr').setLevel('DEBUG')

proj = angr.Project('./bomb', auto_load_libs = False)
cfg = proj.analyses.CFGFast()
TARGET_ADDR, AVOID_ADDR, FIND_ADDR = 0, 0, 0

for addr in list(cfg.kb.functions):
    if cfg.kb.functions[addr].name == 'read_six_numbers':
        TARGET_ADDR = addr
    elif cfg.kb.functions[addr].name == 'explode_bomb':
        AVOID_ADDR = addr
    elif cfg.kb.functions[addr].name == 'phase_defused':
        FIND_ADDR = addr
    if TARGET_ADDR and AVOID_ADDR and FIND_ADDR:
        break

PRED = cfg.get_any_node(TARGET_ADDR).predecessors[1]
ENTRY_PT = cfg.get_successors(PRED, excluding_fakeret = False)[1].addr

print(hex(ENTRY_PT))
state = proj.factory.blank_state(addr = ENTRY_PT)
for i in range(6):
    state.stack_push(state.solver.BVS('int{}'.format(i), 32))

sim = proj.factory.simgr(state)
sim.explore(find = 0x400f3c, avoid = AVOID_ADDR)

print(sim)
FOUND_STATE = sim.found[0]
answer = []

for i in range(3):
    solution = FOUND_STATE.solver.eval(FOUND_STATE.stack_pop())
    answer.append(solution & 0xffffffff)
    answer.append((solution >> 32) & 0xffffffff)

print(answer)
